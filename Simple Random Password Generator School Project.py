# write some random selector and no. generator

# write a program to display options for user to select what kind of attribute he wants in his passwords
# like:
# main: simple mode or advance mode -> in sinple mode ask weak medium or strong password user want
# in advance mode ask user to select from following options:
# 1. length of password
# 2. want special characters or not
# 3. want numbers or not
# 4. percentage of special characters in a password
# 5. algorithm of password generation



# CODE:

# importing modules
import random, time

# incialising functions
def clear(): # for clearing the console
    print('\033[2J')
def sleep(sec): # for clearing the console
    time.sleep(sec)
def mustBe(main, greaterOrNot, limit):
    print(f"{main}, must be {greaterOrNot} than {limit} \U0001F915")

def generateRandomNo(start, end):
    diff = end - start

    key = input(f"Enter a Random String Containing Anything of Minimum Length {diff}: ")

    while len(key) < diff:
        mustBe("String Length", ">", 25)
        key = input(f"Enter a Random String Containing Anything of Minimum Length {diff}: ")
    
    _range = []
    for i in range(start, end+1):
        _range.append(i)
    
    iter = 0
    inc = end-start

    for i in key*inc: # multipling inc(increment) to atleast iterate whole list for very large number of range
        iter += ord(i)
    
    return int(_range[iter%len(_range)]) # iter is a large random number in respect to _range, generated by user. So, we are dividing it by len of _range and recording the remainder, so something of range of start and end will come...

def randomMain(choice: str, startOrList, end=0):
    '''str -> simple int/simple choice/advance'''
    
    if choice.split(" ")[0].lower() == "s" and choice.split(" ")[1].lower() == "i":
        return random.randint(startOrList, end)

    elif choice.split(" ")[0].lower() == "s" and choice.split(" ")[1].lower() == "c":
        return random.choice(startOrList)

    elif choice[0].lower() == "a":
        return generateRandomNo(startOrList, end)


# incialising variables
run = "y"

sleep_short = 1
sleep_midium = 2
sleep_long = 5

while run[0].lower() == "y":
    print('''
    WELCOME TO THE PASSWORD GENERATOR \U0001F609
    May you have a Secure Password ...
    ''')

    mode = input("Select Mode: Simple/Advance Mode(s/a): ")
    password = ""

    clear()

# -------------------------------------------------------------SIMPLE MODE----------------------------------------------------------------

    if mode[0].lower() == "s":
        random_choice = "s i"

        pass_strength = input("Select Password Strength: Weak/Medium/Strong(w/m/s): ")
        if pass_strength[0].lower() == "s":
            pass_length = int(input("Enter Password Length(Must be > Than 12): "))
            clear()
            while pass_length <= 12:
                print("Password Length Must be > Than 12")
                pass_length = int(input("Enter Password Length(Must be > Than 12): "))
                clear()
        else:
            pass_length = int(input("Enter Password Length: "))

        clear()

        # percentage of numbers and symbols in password should be multiple of 10 bcz we are rounding off the numbers further in code
        if pass_strength[0].lower() == "w":
            num_percentage = 10
            symbol_percentage = 10
        elif pass_strength[0].lower() == "m":
            num_percentage = 30
            symbol_percentage = 30
        elif pass_strength[0].lower() == "s":
            num_percentage = 50
            symbol_percentage = 40

# -------------------------------------------------------------ADVANCE MODE----------------------------------------------------------------
            
    elif mode[0].lower() == "a":
        random_choice = "a"

        pass_length = int(input("Enter Password Length: "))
        clear()

        # Taking user defined percentage of num and symbol in password performing some checks...
        def numAndSymbolPercen():
            num_percentage = int(input("Enter Percentage of Numbers in Password(0-100): "))
            clear()

            while num_percentage > 100:
                mustBe("Percentage of Numbers", "<=", 100)
                num_percentage = int(input("Enter Percentage of Numbers in Password(0-100): "))
                clear()
            symbol_percentage = int(input("Enter Percentage of Symbol in Password(0-100): "))
            while symbol_percentage > 100:
                mustBe("Percentage of Symbol", "<=", 100)
                symbol_percentage = int(input("Enter Percentage of Numbers in Password(0-100): "))
                clear()
            
            return [num_percentage, symbol_percentage]

        [num_percentage, symbol_percentage] = numAndSymbolPercen()

        total_percentage = num_percentage + symbol_percentage
        while total_percentage > 100:
            mustBe("Percentage of Number and Symbol Combined", "<=", 100)
            sleep(sleep_midium)
            clear()
            [num_percentage, symbol_percentage] = numAndSymbolPercen()
            total_percentage = num_percentage + symbol_percentage
            clear()
        
        clear()

# -------------------------------------------------------------MAIN PROG----------------------------------------------------------------

    # defining length of numbers and symbols
    num_len = (num_percentage/100) * pass_length
    symbol_len = (symbol_percentage/100) * pass_length

    # adding alphabets to password
    for i in range(pass_length-int(num_len)-int(symbol_len)):
        alpha_lower = chr(randomMain(random_choice, 97, 122)) # ascii values of a-z
        alpha_capital = chr(randomMain(random_choice, 65, 90)) # ascii values of A-Z

        password += randomMain("s c", alpha_lower + alpha_capital)
    
    # adding numbers to password
    for i in range(int(num_len)):
        num = randomMain(random_choice, 0, 9)

        if len(password) != 0: # if password is empty(when num and symbol percentage addsup to 100 %), following alogorithm wil fail, thats why we are checking if password is empty or not
            where = randomMain(random_choice, 0, len(password)-1)
        else:
            where = 0

        password = password[:where] + str(num) + password[where:]
    
    # adding symbols to password
    for i in range(int(symbol_len)):
        symbol_ascii = []
        for i in range(33, 48): # ascii values of symbols not @
            symbol_ascii.append(i)
        symbol_ascii.append(64) # ascii value of @ symbol
        
        symbol = chr(randomMain("s c", symbol_ascii)) # ascii values of symbols

        if len(password) != 0:
            where = randomMain(random_choice, 0, len(password)-1)
        else:
            where = 0

        password = password[:where] + symbol + password[where:]

    # Password Generation Completed
    

    clear()
    print("Generating Password...")
    sleep(sleep_short)
    print(f"Your Password is: {password}")


    run = input("Do you want to Generate another Password(y/n): ")
    clear()

    while not run[0].lower() in 'yn':
        print("Please Enter Valid Input")
        run = input("Do you want to Generate another Password(y/n): ")
        clear()


print("Thank You for using our Service,")
sleep(sleep_short)
print("Please Visit Again for Using Safe And Secure Passwords \U0001F918")
sleep(sleep_short)
print("Have a Nice Day!!!")
sleep(sleep_midium)
clear()
